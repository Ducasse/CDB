"
How to add more resources. 

- Use a script as the following to generate a little file.

- then turn the file contents into a string using the following for example

Wrong for now!!!

'myFromPythonImplementation.cdb' asFileName readStream contents asByteArray base64Encoded
>>> 'bXlGcm9tUHl0aG9uSW1wbGVtZW50YXRpb24uY2Ri'


CDB dumpFileOnTranscript: 'myFromPythonImplementation.cdb'

OldCdbEnumeration new 
	initializeWithByteArray: CDBTest decodedCDBFileContents;
	dump
	


'bXlGcm9tUHl0aG9uSW1wbGVtZW50YXRpb24uY2Ri' base64Decoded
"
Class {
	#name : #CDBTest,
	#superclass : #TestCase,
	#instVars : [
		'testingWorkingDirectory'
	],
	#category : #'CDBFormat-Test-New'
}

{ #category : #ressources }
CDBTest class >> cdbFile [

	^ 'file.cdb'
]

{ #category : #ressources }
CDBTest class >> cdbFileContents [
	
	^ 'VQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAACAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAIAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAIAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAAAFAAAAFQAAAHRocmVlR29sZGVuIFN0YXRlIFdhcnJpb3JzBAAAABcAAABmb3VyUmVjb3JkIG9mIENoaWNhZ28gQnVsbHMDAAAABQAAAG9uZVJhbWJva0brCgAIAAAAAAAAAAAAAAAAAAAAAAAAgVuHC0UIAACrLm58IggAAAAAAAAAAAAA'
]

{ #category : #ressources }
CDBTest class >> decodedCDBFileContents [
	^ self encodedCDBFileContents base64Decoded
]

{ #category : #ressources }
CDBTest class >> encodedCDBFileContents [
	"this string is a base64encoded cdb file."
	^ 'VQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAAAAAAAVQgAAAAAAABVCAAAAAAAAFUIAAACAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAAAAABlCAAAAAAAAGUIAAAAAAAAZQgAAAIAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAAAAAB1CAAAAAAAAHUIAAAAAAAAdQgAAAIAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAACFCAAAAAAAAIUIAAAAAAAAhQgAAAAAAAAFAAAAFQAAAHRocmVlR29sZGVuIFN0YXRlIFdhcnJpb3JzBAAAABcAAABmb3VyUmVjb3JkIG9mIENoaWNhZ28gQnVsbHMDAAAABQAAAG9uZVJhbWJva0brCgAIAAAAAAAAAAAAAAAAAAAAAAAAgVuHC0UIAACrLm58IggAAAAAAAAAAAAA'
]

{ #category : #tests }
CDBTest >> testFind [

	|cdb i maker  keys values result|
	keys := #('three' 'four').
	values := #('Golden State Warriors' 'Record of Chicago Bulls').
	maker := CDBCreator new.
	maker start: 'test.cdb'.
	maker addKey: (keys at: 1) value: (values at: 1).
	maker addKey: (keys at: 2) value: (values at: 2).
	maker finish.
	
	cdb := CDB new.
	cdb createFromFile: 'test.cdb'.
	i := 1.
	[ i<= 2 ]
        whileTrue: [  
	          result := (cdb find: (keys at: i)) asString.
	          self assert: (values at: i) equals: result .
	          i := i + 1.
	     ].
	cdb close.
]

{ #category : #tests }
CDBTest >> testFind2 [

	| cdb maker values |
	values := {  ('a' -> 'ami') . ('b' -> 'balance') . ('c' -> 'cerise') . ('d' -> 'dentiste')}.
	maker := CDBCreator new.
	maker start: 'test.cdb'.
	values do: [ :v | maker addKey: v key value: v value ].
	maker finish.
	
	
	
	cdb := CDB new.
	cdb createFromFile: 'test.cdb'.
	values do: [ :v | 
				| result |
	          result := (cdb find: v key) asString.
	          self assert: v value equals: result.
	     ].
	cdb close.
]

{ #category : #tests }
CDBTest >> testFindWithDuplicatedKeys [

	| cdb maker values result |
	values := {  ('a' -> 'ami') . ('b' -> 'balance') . ('c' -> 'cerise') . ('d' -> 'dentiste') . ('a' -> 'ennemi') }.
	maker := CDBCreator new.
	maker start: 'test.cdb'.
	values do: [ :v | maker addKey: v key value: v value ].
	maker finish.
	
	cdb := CDB new.
	cdb createFromFile: 'test.cdb'.
	result := (cdb find: 'a'). 
	self assert: result asString equals: 'ennemi'.
	cdb close.
]

{ #category : #tests }
CDBTest >> testFindWithbetterIteratingLogic [

	| cdb maker values |
	values := {  ('a' -> 'ami') . ('b' -> 'balance') . ('c' -> 'cerise') . ('d' -> 'dentiste')}.
	maker := CDBCreator new.
	maker start: 'test.cdb'.
	values do: [ :v | maker addKey: v key value: v value ].
	maker finish.
	
	
	cdb := CDB new.
	cdb createFromFile: 'test.cdb'.
	
	values do: [ :v | 
				| result |
	          result := (cdb find: v key) asString.
	          self assert: v value equals: result.
	     ].
	cdb close.
]

{ #category : #tests }
CDBTest >> testNextElement [

	| em element |
	em := OldCdbEnumeration new.
	em initializeWithByteArray: self class cdbFileContents base64Decoded readStream.
	element := em nextElement.
	self assert: element key asString equals: 'three'.
	self assert: element data asString equals: 'Golden State Warriors'.
	
	element := em nextElement.
	self assert: element key asString equals: 'four'.
	self assert: element data asString equals: 'Record of Chicago Bulls'.

]

{ #category : #tests }
CDBTest >> testReadFile [

	| em element |
	testingWorkingDirectory := FileSystem memory workingDirectory.
	(testingWorkingDirectory / self class cdbFile)
		writeStreamDo: [ :stream | 
			stream nextPutAll: self class encodedCDBFileContents ].
		
	em := OldCdbEnumeration new.
	em initializeWithByteArray: (testingWorkingDirectory / self class cdbFile) contents base64Decoded.
	element := em nextElement.
	self assert: element key asString equals: 'three'.
	self assert: element data asString equals: 'Golden State Warriors'.
	
	element := em nextElement.
	self assert: element key asString equals: 'four'.
	self assert: element data asString equals: 'Record of Chicago Bulls'.

]

{ #category : #tests }
CDBTest >> testReadFile2 [

	| em element |
	testingWorkingDirectory := FileSystem memory workingDirectory.
	(testingWorkingDirectory / self class cdbFile)
		writeStreamDo: [ :stream | 
			stream nextPutAll: self class encodedCDBFileContents ].
		
	em := OldCdbEnumeration new.
	em initializeWithByteArray: (testingWorkingDirectory / self class cdbFile) contents base64Decoded.
	element := em nextElement.
	self assert: element key asString equals: 'three'.
	self assert: element data asString equals: 'Golden State Warriors'.
	
	element := em nextElement.
	self assert: element key asString equals: 'four'.
	self assert: element data asString equals: 'Record of Chicago Bulls'.

]

{ #category : #'tests via internal buffer' }
CDBTest >> testReadFromByteArray [

	| em element |
	em := OldCdbEnumeration new.
	em initializeWithByteArray: self class cdbFileContents base64Decoded.
	element := em nextElement.
	self assert: element key asString equals: 'three'.
	self assert: element data asString equals: 'Golden State Warriors'.
	
	element := em nextElement.
	self assert: element key asString equals: 'four'.
	self assert: element data asString equals: 'Record of Chicago Bulls'.

]
